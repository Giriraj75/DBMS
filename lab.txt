1. Design and Develop SQL DDL statements which demonstrate the use of SQL objects such as Table, 
View , Index and Sequence also implement SQL DML statements with operators, functions, Set 
operators, Clauses.


1. SQL DDL and DML Statements
DDL Statements
sql
-- Create Table
CREATE TABLE Employee (
    employee_no INT PRIMARY KEY,
    employee_name VARCHAR(50) NOT NULL,
    join_date DATE,
    designation VARCHAR(30),
    salary DECIMAL(10,2)
);

-- Create View
CREATE VIEW HighPaidEmployees AS
SELECT employee_no, employee_name, salary
FROM Employee
WHERE salary > 50000
ORDER BY salary DESC;

-- Create Index
CREATE INDEX idx_employee_name ON Employee(employee_name);

-- Create Sequence
CREATE SEQUENCE emp_seq
START WITH 1001
INCREMENT BY 1
MAXVALUE 9999
NOCACHE
NOCYCLE;
DML Statements
sql
-- Insert data
INSERT INTO Employee VALUES (1001, 'John Smith', '2020-01-15', 'Manager', 75000);
INSERT INTO Employee VALUES (1002, 'Jane Doe', '2019-05-22', 'Developer', 65000);
INSERT INTO Employee VALUES (1003, 'Robert Johnson', '2021-03-10', 'Analyst', 55000);

-- Update data
UPDATE Employee SET salary = salary * 1.1 WHERE designation = 'Developer';

-- Delete data
DELETE FROM Employee WHERE employee_no = 1003;

-- Select with operators
SELECT * FROM Employee WHERE salary BETWEEN 50000 AND 70000;

-- Select with functions
SELECT employee_name, UPPER(designation), CONCAT('$', salary) 
FROM Employee;

-- Set operators
SELECT employee_name FROM Employee WHERE designation = 'Manager'
UNION
SELECT employee_name FROM Employee WHERE salary > 60000;

-- Clauses
SELECT designation, AVG(salary) as avg_salary
FROM Employee
GROUP BY designation
HAVING AVG(salary) > 50000
ORDER BY avg_salary DESC;
Sample Input/Output
Input:

INSERT INTO Employee VALUES (1004, 'Alice Brown', '2022-02-18', 'Developer', 60000);
Output (for SELECT query):

employee_no | employee_name | join_date  | designation | salary
-----------+--------------+------------+-------------+--------
1001       | John Smith    | 2020-01-15 | Manager     | 75000
1002       | Jane Doe      | 2019-05-22 | Developer   | 71500
1004       | Alice Brown   | 2022-02-18 | Developer   | 60000


2. Design at least 10 SQL queries for suitable database application using SQL DML statements: all 
types of Join, Sub-Query and View.


2. SQL Queries with Joins, Sub-queries and Views
sql
-- 1. Inner Join
SELECT e.employee_name, d.department_name
FROM Employee e
INNER JOIN Department d ON e.dept_id = d.dept_id;

-- 2. Left Outer Join
SELECT e.employee_name, p.project_name
FROM Employee e
LEFT JOIN Projects p ON e.employee_no = p.lead_employee_id;

-- 3. Right Outer Join
SELECT d.department_name, e.employee_name
FROM Department d
RIGHT JOIN Employee e ON d.dept_id = e.dept_id;

-- 4. Full Outer Join
SELECT e.employee_name, p.project_name
FROM Employee e
FULL JOIN Projects p ON e.employee_no = p.lead_employee_id;

-- 5. Self Join
SELECT a.employee_name AS Employee, b.employee_name AS Manager
FROM Employee a, Employee b
WHERE a.manager_id = b.employee_no;

-- 6. Subquery in WHERE
SELECT employee_name, salary
FROM Employee
WHERE salary > (SELECT AVG(salary) FROM Employee);

-- 7. Subquery in FROM
SELECT dept_name, avg_salary
FROM (SELECT d.department_name as dept_name, AVG(e.salary) as avg_salary
      FROM Employee e JOIN Department d ON e.dept_id = d.dept_id
      GROUP BY d.department_name) dept_stats
WHERE avg_salary > 50000;

-- 8. Subquery with EXISTS
SELECT employee_name
FROM Employee e
WHERE EXISTS (SELECT 1 FROM Projects p WHERE p.lead_employee_id = e.employee_no);

-- 9. View with JOIN
CREATE VIEW EmployeeDepartment AS
SELECT e.employee_no, e.employee_name, d.department_name, e.salary
FROM Employee e JOIN Department d ON e.dept_id = d.dept_id;

-- 10. Correlated Subquery
SELECT e.employee_name, e.salary
FROM Employee e
WHERE e.salary > (SELECT AVG(salary) FROM Employee WHERE dept_id = e.dept_id);
Sample Input/Output
Input (Department table):

dept_id | department_name
--------+---------------
1       | HR
2       | IT
3       | Finance
Output (Query 1):

employee_name | department_name
-------------+---------------
John Smith   | HR
Jane Doe     | IT
Alice Brown  | IT


3. Write a PL/SQL code to implement all types of cursor and display employee number, name and 
salary of 5 highest paid employees using cursor.Employee(employee no, employee name, join_date, 
designation, salary).


3. PL/SQL Cursor Implementation
sql
-- Create Employee table if not exists
CREATE TABLE Employee (
    employee_no INT PRIMARY KEY,
    employee_name VARCHAR(50) NOT NULL,
    join_date DATE,
    designation VARCHAR(30),
    salary DECIMAL(10,2)
);

-- PL/SQL Block with all cursor types
DECLARE
    -- Explicit Cursor
    CURSOR emp_cursor IS 
        SELECT employee_no, employee_name, salary 
        FROM Employee 
        ORDER BY salary DESC 
        FETCH FIRST 5 ROWS ONLY;
    
    -- Cursor Variable
    TYPE emp_refcur IS REF CURSOR;
    v_emp_refcur emp_refcur;
    
    -- Cursor with parameter
    CURSOR dept_emp_cursor(p_dept VARCHAR2) IS
        SELECT employee_no, employee_name, salary
        FROM Employee
        WHERE designation = p_dept;
    
    v_emp_no Employee.employee_no%TYPE;
    v_emp_name Employee.employee_name%TYPE;
    v_salary Employee.salary%TYPE;
BEGIN
    -- 1. Explicit Cursor
    DBMS_OUTPUT.PUT_LINE('Top 5 Employees by Salary (Explicit Cursor):');
    OPEN emp_cursor;
    LOOP
        FETCH emp_cursor INTO v_emp_no, v_emp_name, v_salary;
        EXIT WHEN emp_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp_no || ' ' || v_emp_name || ' ' || v_salary);
    END LOOP;
    CLOSE emp_cursor;
    
    -- 2. Cursor FOR LOOP (Implicit)
    DBMS_OUTPUT.PUT_LINE('All Employees (Cursor FOR LOOP):');
    FOR emp_rec IN (SELECT employee_no, employee_name, salary FROM Employee) LOOP
        DBMS_OUTPUT.PUT_LINE(emp_rec.employee_no || ' ' || emp_rec.employee_name || ' ' || emp_rec.salary);
    END LOOP;
    
    -- 3. REF CURSOR
    DBMS_OUTPUT.PUT_LINE('Developers (REF Cursor):');
    OPEN v_emp_refcur FOR SELECT employee_no, employee_name, salary FROM Employee WHERE designation = 'Developer';
    LOOP
        FETCH v_emp_refcur INTO v_emp_no, v_emp_name, v_salary;
        EXIT WHEN v_emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_emp_no || ' ' || v_emp_name || ' ' || v_salary);
    END LOOP;
    CLOSE v_emp_refcur;
    
    -- 4. Parameterized Cursor
    DBMS_OUTPUT.PUT_LINE('Managers (Parameterized Cursor):');
    FOR emp_rec IN dept_emp_cursor('Manager') LOOP
        DBMS_OUTPUT.PUT_LINE(emp_rec.employee_no || ' ' || emp_rec.employee_name || ' ' || emp_rec.salary);
    END LOOP;
END;
/
Sample Input/Output
Input (Employee table):

employee_no | employee_name | join_date  | designation | salary
-----------+--------------+------------+-------------+--------
1001       | John Smith    | 2020-01-15 | Manager     | 75000
1002       | Jane Doe      | 2019-05-22 | Developer   | 65000
1003       | Alice Brown   | 2022-02-18 | Developer   | 60000
1004       | Bob Johnson   | 2021-03-10 | Analyst     | 55000
1005       | Sarah Lee     | 2020-11-05 | Manager     | 80000
Output:

Top 5 Employees by Salary (Explicit Cursor):
1005 Sarah Lee 80000
1001 John Smith 75000
1002 Jane Doe 65000
1003 Alice Brown 60000
1004 Bob Johnson 55000

All Employees (Cursor FOR LOOP):
1001 John Smith 75000
1002 Jane Doe 65000
1003 Alice Brown 60000
1004 Bob Johnson 55000
1005 Sarah Lee 80000

Developers (REF Cursor):
1002 Jane Doe 65000
1003 Alice Brown 60000

Managers (Parameterized Cursor):
1001 John Smith 75000
1005 Sarah Lee 80000


4. PL/SQL Stored Procedure and Stored Function : Write a PL/SQL procedure to find the number of students ranging from 100-80%, 79-70%, 69-60%,59-50 & below 49% in each course from the 
Student_course table given by the procedure as parameter. 
Student_course(Roll_no,Course,Couse_code,Semester,Total_Marks,Percentage)


4. PL/SQL Stored Procedure for Student Grades
sql
-- Create Student_course table
CREATE TABLE Student_course (
    Roll_no VARCHAR2(10),
    Course VARCHAR2(50),
    Course_code VARCHAR2(10),
    Semester NUMBER(2),
    Total_Marks NUMBER(5),
    Percentage NUMBER(5,2),
    PRIMARY KEY (Roll_no, Course_code, Semester)
);

-- Stored Procedure
CREATE OR REPLACE PROCEDURE Calculate_Grade_Distribution(
    p_course_code IN Student_course.Course_code%TYPE)
IS
    v_100_80 NUMBER := 0;
    v_79_70 NUMBER := 0;
    v_69_60 NUMBER := 0;
    v_59_50 NUMBER := 0;
    v_below_50 NUMBER := 0;
BEGIN
    -- Count students in each grade range
    SELECT COUNT(CASE WHEN Percentage BETWEEN 80 AND 100 THEN 1 END),
           COUNT(CASE WHEN Percentage BETWEEN 70 AND 79 THEN 1 END),
           COUNT(CASE WHEN Percentage BETWEEN 60 AND 69 THEN 1 END),
           COUNT(CASE WHEN Percentage BETWEEN 50 AND 59 THEN 1 END),
           COUNT(CASE WHEN Percentage < 50 THEN 1 END)
    INTO v_100_80, v_79_70, v_69_60, v_59_50, v_below_50
    FROM Student_course
    WHERE Course_code = p_course_code;
    
    -- Display results
    DBMS_OUTPUT.PUT_LINE('Grade Distribution for Course: ' || p_course_code);
    DBMS_OUTPUT.PUT_LINE('80-100%: ' || v_100_80 || ' students');
    DBMS_OUTPUT.PUT_LINE('70-79%: ' || v_79_70 || ' students');
    DBMS_OUTPUT.PUT_LINE('60-69%: ' || v_69_60 || ' students');
    DBMS_OUTPUT.PUT_LINE('50-59%: ' || v_59_50 || ' students');
    DBMS_OUTPUT.PUT_LINE('Below 50%: ' || v_below_50 || ' students');
END;
/

-- Stored Function
CREATE OR REPLACE FUNCTION Get_Course_Grade(
    p_roll_no IN Student_course.Roll_no%TYPE,
    p_course_code IN Student_course.Course_code%TYPE)
RETURN VARCHAR2
IS
    v_percentage Student_course.Percentage%TYPE;
    v_grade VARCHAR2(2);
BEGIN
    SELECT Percentage INTO v_percentage
    FROM Student_course
    WHERE Roll_no = p_roll_no AND Course_code = p_course_code;
    
    IF v_percentage >= 80 THEN
        v_grade := 'A';
    ELSIF v_percentage >= 70 THEN
        v_grade := 'B';
    ELSIF v_percentage >= 60 THEN
        v_grade := 'C';
    ELSIF v_percentage >= 50 THEN
        v_grade := 'D';
    ELSE
        v_grade := 'F';
    END IF;
    
    RETURN v_grade;
END;
/
Sample Input/Output
Input (Student_course table):

Roll_no | Course      | Course_code | Semester | Total_Marks | Percentage
--------+------------+------------+----------+------------+-----------
S001    | Database    | CS101       | 3        | 85          | 85.00
S002    | Database    | CS101       | 3        | 72          | 72.00
S003    | Database    | CS101       | 3        | 65          | 65.00
S004    | Database    | CS101       | 3        | 55          | 55.00
S005    | Database    | CS101       | 3        | 45          | 45.00
Execute Procedure:

sql
EXEC Calculate_Grade_Distribution('CS101');
Output:

Grade Distribution for Course: CS101
80-100%: 1 students
70-79%: 1 students
60-69%: 1 students
50-59%: 1 students
Below 50%: 1 students
Execute Function:

sql
SELECT Get_Course_Grade('S001', 'CS101') FROM dual;
Output:

A


5. Database Trigger (Row level and Statement level triggers, Before and After Triggers):Write a database trigger on Employee table. The System should keep track of the records that are being updated or deleted. The old value of updated or deleted records should be added in to a new table when the Employee table is updated. Employee(employee no, employee name, join_date, 
designation, salary).


5. Database Trigger for Employee Table
sql
-- Create audit table
CREATE TABLE Employee_Audit (
    audit_id NUMBER GENERATED ALWAYS AS IDENTITY,
    employee_no NUMBER,
    employee_name VARCHAR2(50),
    old_designation VARCHAR2(30),
    old_salary NUMBER(10,2),
    operation VARCHAR2(10),
    operation_date DATE,
    PRIMARY KEY (audit_id)
);

-- Row level trigger for UPDATE (BEFORE)
CREATE OR REPLACE TRIGGER trg_employee_update
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
    INSERT INTO Employee_Audit (employee_no, employee_name, old_designation, 
                              old_salary, operation, operation_date)
    VALUES (:OLD.employee_no, :OLD.employee_name, :OLD.designation, 
           :OLD.salary, 'UPDATE', SYSDATE);
END;
/

-- Row level trigger for DELETE (AFTER)
CREATE OR REPLACE TRIGGER trg_employee_delete
AFTER DELETE ON Employee
FOR EACH ROW
BEGIN
    INSERT INTO Employee_Audit (employee_no, employee_name, old_designation, 
                              old_salary, operation, operation_date)
    VALUES (:OLD.employee_no, :OLD.employee_name, :OLD.designation, 
           :OLD.salary, 'DELETE', SYSDATE);
END;
/

-- Statement level trigger (AFTER)
CREATE OR REPLACE TRIGGER trg_employee_statement
AFTER INSERT OR UPDATE OR DELETE ON Employee
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM Employee;
    DBMS_OUTPUT.PUT_LINE('Employee table modified. Total employees now: ' || v_count);
END;
/
Sample Input/Output
Initial Employee table:

employee_no | employee_name | join_date  | designation | salary
-----------+--------------+------------+-------------+--------
1001       | John Smith    | 2020-01-15 | Manager     | 75000
1002       | Jane Doe      | 2019-05-22 | Developer   | 65000
Execute UPDATE:

sql
UPDATE Employee SET salary = 80000, designation = 'Senior Manager' 
WHERE employee_no = 1001;
Execute DELETE:

sql
DELETE FROM Employee WHERE employee_no = 1002;
Employee_Audit table after operations:

audit_id | employee_no | employee_name | old_designation | old_salary | operation | operation_date
--------+------------+--------------+----------------+-----------+-----------+--------------
1       | 1001        | John Smith    | Manager         | 75000     | UPDATE    | 2023-10-25
2       | 1002        | Jane Doe      | Developer       | 65000     | DELETE    | 2023-10-25


6. Design and Develop MongoDB Queries using CRUD operations.


6. MongoDB CRUD Operations
javascript
// Create database and collection
use company;

// Create (Insert) operations
db.employees.insertMany([
    {
        employee_id: 1001,
        name: "John Smith",
        join_date: new Date("2020-01-15"),
        designation: "Manager",
        salary: 75000,
        department: "HR"
    },
    {
        employee_id: 1002,
        name: "Jane Doe",
        join_date: new Date("2019-05-22"),
        designation: "Developer",
        salary: 65000,
        department: "IT",
        skills: ["Java", "Python", "SQL"]
    },
    {
        employee_id: 1003,
        name: "Alice Brown",
        join_date: new Date("2022-02-18"),
        designation: "Developer",
        salary: 60000,
        department: "IT",
        skills: ["JavaScript", "Node.js"]
    }
]);

// Read (Query) operations
// Find all employees
db.employees.find();

// Find IT department employees
db.employees.find({department: "IT"});

// Find employees with salary > 60000
db.employees.find({salary: {$gt: 60000}});

// Find developers who know Java
db.employees.find({
    designation: "Developer",
    skills: "Java"
});

// Update operations
// Update salary for a specific employee
db.employees.updateOne(
    {employee_id: 1001},
    {$set: {salary: 80000}}
);

// Add a skill to an employee
db.employees.updateOne(
    {employee_id: 1003},
    {$push: {skills: "MongoDB"}}
);

// Increment all salaries by 5%
db.employees.updateMany(
    {},
    {$mul: {salary: 1.05}}
);

// Delete operations
// Delete a specific employee
db.employees.deleteOne({employee_id: 1002});

// Delete all interns
db.employees.deleteMany({designation: "Intern"});
Sample Input/Output
Input (Insert):

javascript
db.employees.insertOne({
    employee_id: 1004,
    name: "Bob Johnson",
    designation: "Analyst",
    salary: 55000,
    department: "Finance"
});
Output (Find):

javascript
db.employees.find({department: "IT"});
Output:

json
[
    {
        "_id": ObjectId("5f8d8a7b2f4d4e3d8c8b7a6c"),
        "employee_id": 1002,
        "name": "Jane Doe",
        "designation": "Developer",
        "salary": 65000,
        "department": "IT",
        "skills": ["Java", "Python", "SQL"]
    },
    {
        "_id": ObjectId("5f8d8a7b2f4d4e3d8c8b7a6d"),
        "employee_id": 1003,
        "name": "Alice Brown",
        "designation": "Developer",
        "salary": 60000,
        "department": "IT",
        "skills": ["JavaScript", "Node.js", "MongoDB"]
    }
]


7. Implement aggregation, indexing and MapReduce with suitable example using MongoDB.


 7. MongoDB Aggregation, Indexing and MapReduce
javascript
// Aggregation example
db.employees.aggregate([
    // Stage 1: Filter by department
    {$match: {department: "IT"}},
    
    // Stage 2: Group by designation and calculate averages
    {$group: {
        _id: "$designation",
        avgSalary: {$avg: "$salary"},
        count: {$sum: 1}
    }},
    
    // Stage 3: Sort by avgSalary descending
    {$sort: {avgSalary: -1}},
    
    // Stage 4: Project to reshape output
    {$project: {
        designation: "$_id",
        averageSalary: {$round: ["$avgSalary", 2]},
        employeeCount: "$count",
        _id: 0
    }}
]);

// Indexing examples
// Create single field index
db.employees.createIndex({employee_id: 1});

// Create compound index
db.employees.createIndex({department: 1, designation: 1});

// Create text index for search
db.employees.createIndex({name: "text", skills: "text"});

// Text search using index
db.employees.find({$text: {$search: "Java Developer"}});

// MapReduce example
// Define map function
var mapFunction = function() {
    emit(this.department, {
        count: 1,
        totalSalary: this.salary,
        avgSalary: 0
    });
};

// Define reduce function
var reduceFunction = function(key, values) {
    var reducedValue = {count: 0, totalSalary: 0, avgSalary: 0};
    
    values.forEach(function(value) {
        reducedValue.count += value.count;
        reducedValue.totalSalary += value.totalSalary;
    });
    
    return reducedValue;
};

// Define finalize function
var finalizeFunction = function(key, reducedValue) {
    if (reducedValue.count > 0) {
        reducedValue.avgSalary = reducedValue.totalSalary / reducedValue.count;
    }
    return reducedValue;
};

// Execute MapReduce
db.employees.mapReduce(
    mapFunction,
    reduceFunction,
    {
        out: "department_stats",
        finalize: finalizeFunction
    }
);

// View results
db.department_stats.find().pretty();
Sample Input/Output
Aggregation Output:

json
[
    {
        "designation": "Developer",
        "averageSalary": 62500,
        "employeeCount": 2
    }
]
MapReduce Output:

json
{
    "_id": "IT",
    "value": {
        "count": 2,
        "totalSalary": 125000,
        "avgSalary": 62500
    }
}
{
    "_id": "HR",
    "value": {
        "count": 1,
        "totalSalary": 80000,
        "avgSalary": 80000
    }
}
{
    "_id": "Finance",
    "value": {
        "count": 1,
        "totalSalary": 55000,
        "avgSalary": 55000
    }
}